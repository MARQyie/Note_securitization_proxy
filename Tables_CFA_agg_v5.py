# --------------------------------------------
# TABLES CFA
# Mark van der Plaat
# December 2021
# --------------------------------------------
''' This script makes tables for the CFA securitization paper
    with aggregated data.

    All data is generated by Lavaan in R. See CFA_v1.R for more details.
'''

# --------------------------------------------
# Import Packages
# --------------------------------------------

# Data manipulation
import pandas as pd
import numpy as np

# Plotting
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style='whitegrid', font_scale=3)

# Set WD
import os
os.chdir(r'D:\RUG\PhD\Materials_papers\01-Note_on_securitization')

# Load table functions
from Functions_tables_CFA import *

# --------------------------------------------
# Prelims
# --------------------------------------------
dict_vars = getVarDict()

# Add Factor names
dict_vars.update({'LS': 'Loan Sales',
                  'ABS': 'ABS Sec.',
                  'CDO': 'CDO Sec.',
                  'ABCP': 'ABCP Sec.',
                  'SEC': 'Securitization'})

# --------------------------------------------
# Load data 
# --------------------------------------------

# fit indices 
df_fi = pd.read_csv('Results/CFA_fitmeasures_theory_agg.csv', index_col=0)

# Parameter estimates
df_params = pd.read_csv('Results/CFA_params_theory_agg.csv', index_col=0)

# Reliability measures
df_reliability = pd.read_csv('Results/CFA_reliability_theory_agg.csv', index_col=0)

# Modification indices
df_mi= pd.read_csv('Results/CFA_modindices_theory_agg.csv', index_col=0)

# Residual covariance matrix
df_srcm = pd.read_csv('Results/CFA_rescov_standard_theory_agg.csv', index_col=0)

# Communalities
df_r2 = pd.read_csv('Results/CFA_r2_theory_agg.csv', index_col=0)

# --------------------------------------------
# fit indices 
# --------------------------------------------

## Get tidy table
df_fi_tidy = tidyFitInd(df_fi)

## To latex
### Prelims
dict_options = {'column_format': 'p{3cm}' + 'p{1.5cm}' * df_fi_tidy.shape[1],
                'caption': ('Fit Indices: Two-Factor Theory Model With Aggregated Data'),
                'label': 'tab:cfa_fit_theory_agg',
                'position': 'th'}
notes = '\\multicolumn{2}{p{4.5cm}}{\\textit{Notes.} Fit indices of the two-factor theory model with aggregated data.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_fi = table2Latex(df_fi_tidy, dict_options, notes, string_size)
text_latex_fi = open('Results/CFA_fi_theory_agg.tex', 'w')
text_latex_fi.write(latex_fi)
text_latex_fi.close()

# --------------------------------------------
# Parameter estimates 
# --------------------------------------------

## Get tidy table
df_params_tidy = tidyParamEst(df_params)

## To latex
### Prelims
dict_options = {'column_format': 'p{4.75cm}p{4.75cm}' + 'p{1cm}' * df_params_tidy.shape[1],
                'caption': ('Factor Loadings, Variances and Covariances: Two-factor Theory Model With Aggregated Data'),
                'label': 'tab:cfa_table_2ftheory_agg',
                'position': 'th'}
notes = '\\multicolumn{6}{p{16cm}}{\\textit{Notes.} Factor loadings, factor variances and covariances, and unique variances and covariances of the two-factor theory model with aggregated data. The last column presents the completely standardized estimates, where the factor variances are fixed to one and all other proxies are standardized.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_params = table2Latex(df_params_tidy, dict_options, notes, string_size)
text_latex_params = open('Results/CFA_params_theory_agg.tex', 'w')
text_latex_params.write(latex_params)
text_latex_params.close()

# --------------------------------------------
# Residual covariance matrix
# --------------------------------------------

# One factor model
heatmap(df_srcm.rename(columns=dict_vars, index=dict_vars), 'Residual_cov_std_heatmap_theory_agg.png')

# --------------------------------------------
# Modification indices 
# --------------------------------------------

# Theory
## Get tidy tables
df_miepc_load, df_mi_cov, df_epc_cov = tidyModInd(df_mi)

## To latex
### MI EPC loadings
dict_options = {'column_format': 'p{4.75cm}' + 'p{1.5cm}' * df_miepc_load.shape[1],
                'caption': ('Modification Indices and EPCs of the Factor Loadings: Two-factor Theory Model With Aggregated Data'),
                'label': 'tab:cfa_mipec_load_theory_agg',
                'position': 'th'}
notes = '\\multicolumn{5}{p{13cm}}{\\textit{Notes.} Modification indices and the completely standardized expected parameter change (EPC) of the two-factor theory model with aggregated data. The table only displays the modification indices and EPCs for freeing factor loadings. The proxies for \\textit{securitization income}, \\textit{servicing fees} and \\textit{credit default swaps purchased} do not have any modification indices and EPCs for factor loadings, because they already load on both factors. The modification indices relect a drop in the unscaled $\chi^2$ statistic after freeing a previously fixed parameter. The EPCs show the expected change in a parameter estimate if it were freely estimated.} \n'
string_size = '\\scriptsize\n'

latex_miepc = table2Latex(df_miepc_load, dict_options, notes, string_size)
text_latex_miepc = open('Results/CFA_miepc_theory_agg_load.tex', 'w')
text_latex_miepc.write(latex_miepc)
text_latex_miepc.close()

### MI Covariances
dict_options = {'column_format': 'p{4.75cm}' + 'p{1cm}' * df_mi_cov.shape[1],
                'caption': ('Modification Indices of the Covariances: Two-factor Theory Model With Aggregate Data'),
                'label': 'tab:cfa_mi_cov_theory_agg',
                'position': 'th'}
notes = '\\multicolumn{12}{p{20.5cm}}{\\textit{Notes.} Modification indices of the two-factor theory model with aggregated data. The table only displays the modification indices for freeing error covariances. The modification indices relect a drop in the unscaled $\chi^2$ statistic after freeing a previously fixed parameter.} \n'
string_size = '\\scriptsize\n'

latex_miepc = table2Latex(df_mi_cov, dict_options, notes, string_size)
latex_miepc = latex_miepc.replace('table','sidewaystable')
text_latex_miepc = open('Results/CFA_mi_theory_agg_cov.tex', 'w')
text_latex_miepc.write(latex_miepc)
text_latex_miepc.close()

### EPC Covariances
dict_options = {'column_format': 'p{4.75cm}' + 'p{1cm}' * df_epc_cov.shape[1],
                'caption': ('EPCs of the Covariances: Two-factor Theory Model With Aggregated Data'),
                'label': 'tab:cfa_epc_cov_theory',
                'position': 'th'}
notes = '\\multicolumn{12}{p{20.5cm}}{\\textit{Notes.} Completely standardized expected parameter change (EPC) of the two-factor theory model. The table only displays the EPCs for freeing error covariances. The EPCs show the expected change in a parameter estimate if it were freely estimated.} \n'
string_size = '\\scriptsize\n'

latex_miepc = table2Latex(df_epc_cov, dict_options, notes, string_size)
latex_miepc = latex_miepc.replace('table','sidewaystable')
text_latex_miepc = open('Results/CFA_epc_theory_agg_cov.tex', 'w')
text_latex_miepc.write(latex_miepc)
text_latex_miepc.close()

# --------------------------------------------
# Communalities
# --------------------------------------------

# Theory model
## Clean the table
df_r2_tidy = df_r2.rename(columns={'x': 'Communality'}, index=dict_vars)

## Add unique variance column
df_r2_tidy['Unique Variance'] = 1 - df_r2_tidy.Communality

## To latex
### Prelims
dict_options = {'column_format': 'p{5cm}' + 'p{1.5cm}' * df_r2_tidy.shape[1],
                'caption': ('Communalities and Unique Variances: Two-factor Theory Model With Aggregated Data'),
                'label': 'tab:cfa_r2_theory',
                'position': 'th'}
notes = '\\multicolumn{3}{p{9cm}}{\\textit{Notes.} Communalities and unique variancess of the proxy variables.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_r2_theory = table2Latex(df_r2_tidy, dict_options, notes, string_size)
text_latex_r2_theory = open('Results/CFA_r2_theory_agg.tex', 'w')
text_latex_r2_theory.write(latex_r2_theory)
text_latex_r2_theory.close()