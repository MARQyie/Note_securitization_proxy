# --------------------------------------------
# TABLES CFA
# Mark van der Plaat
# December 2021
# --------------------------------------------
''' This script makes tables for the CFA securitization paper.

    All data is generated by Lavaan in R. See CFA_v1.R for more details.
'''

# --------------------------------------------
# Import Packages
# --------------------------------------------

# Data manipulation
import pandas as pd
import numpy as np

# Plotting
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style='whitegrid', font_scale=3)

import os

os.chdir(r'D:\RUG\PhD\Materials_papers\01-Note_on_securitization')

# Load table functions
from Functions_tables_CFA import *

# --------------------------------------------
# Prelims
# --------------------------------------------
dict_vars = getVarDict()

# Add Factor names
dict_vars.update({'LS': 'Loan Sales',
                  'ABS': 'ABS Sec.',
                  'CDO': 'CDO Sec.',
                  'ABCP': 'ABCP Sec.',
                  'SEC': 'Securitization'})

# --------------------------------------------
# Load data 
# --------------------------------------------

# fit indices 
df_fi_dls = pd.read_csv('Results/CFA_fitmeasures_theory_DLS.csv', index_col=0)
df_fi_uls = pd.read_csv('Results/CFA_fitmeasures_theory_ULS.csv', index_col=0)

# Parameter estimates
df_params_dls = pd.read_csv('Results/CFA_params_theory_DLS.csv', index_col=0)
df_params_uls = pd.read_csv('Results/CFA_params_theory_ULS.csv', index_col=0)

# Communalities
df_r2_dls = pd.read_csv('Results/CFA_r2_theory_DLS.csv', index_col=0)
df_r2_uls = pd.read_csv('Results/CFA_r2_theory_ULS.csv', index_col=0)

# --------------------------------------------
# fit indices 
# --------------------------------------------

# All estimators
## Get tidy table
df_fi = pd.concat([df_fi_dls, df_fi_uls], axis=1)

lst_fi = ['npar', 'df', 'baseline.df', 'chisq',
          'chisq.scaled','pvalue.scaled',
          'srmr','rmsea','rmsea.robust',
          'rni','rni.robust', 'cfi','tli',
           'cfi.robust', 'tli.robust']
lst_fi_labels = ['No. Params', 'DoF', 'DoF baseline',
                 '$\chi^2$',
                 'Yuan--Bentler $\chi^2$', 'p-val Yuan--Bentler $\chi^2$',
                 'SRMR', 'RMSEA', 'RMSEA (robust)',
                 'RNI','RNI (robust)', 'CFI', 'TLI',
                 'CFI (robust)', 'TLI (robust)']
df_fi_tidy = df_fi.loc[lst_fi, :]
df_fi_tidy.index = lst_fi_labels
df_fi_tidy.columns = ['DLS','ULS']
df_fi_tidy.iloc[[3,7,9,11,12],0] = np.nan

## To latex
### Prelims
dict_options = {'column_format': 'p{3cm}' + 'p{1.5cm}' * df_fi_tidy.shape[1],
                'caption': ('Fit Indices: Other Robust Estimation Procedures'),
                'label': 'tab:cfa_fit_robust',
                'position': 'th'}
notes = '\\multicolumn{4}{p{9cm}}{\\textit{Notes.} Fit indices of the two-factor models. The first column contains the fit indices for the theory-based model estimated with distributionally-weighted least-squares and the second column contains the same model estimated with unweighted least-squares.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_fi_2f = table2Latex(df_fi_tidy, dict_options, notes, string_size)
text_latex_latex_fi_2f = open('Results/CFA_fi_robust.tex', 'w')
text_latex_latex_fi_2f.write(latex_fi_2f)
text_latex_latex_fi_2f.close()

# --------------------------------------------
# Parameter estimates 
# --------------------------------------------

# One securitization factor
## Get tidy table
df_params_dls_tidy = tidyParamEst(df_params_dls)
df_params_uls_tidy = tidyParamEst(df_params_uls)
df_params_tidy = pd.concat([df_params_dls_tidy.iloc[:,[0,2]],
                            df_params_uls_tidy.iloc[:,[0,2]]], axis=1)

multicolumn_lst = [('DLS','Estimates'),('DLS','P-value'),
                   ('ULS','Estimates'),('ULS','P-value')]

df_params_tidy.columns = pd.MultiIndex.from_tuples(multicolumn_lst,
                                                      names=['', ''])

## To latex
### Prelims
dict_options = {'column_format': 'p{4.75cm}p{4.75cm}' + 'p{1cm}' * df_params_tidy.shape[1],
                'caption': ('Factor Loadings, Variances and Covariances: Other Robust Estimation Procedures'),
                'label': 'tab:cfa_table_robust',
                'position': 'th'}
notes = '\\multicolumn{6}{p{16cm}}{\\textit{Notes.} Factor loadings, factor variance, and unique variances and covariances of the two-factor theory model estimated with several robust estimation procedures. The table only displays the factor loadings and variances and their respective p-values. DLS stands for distributionally-weighted least-squares and ULS for unweighted least squares} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_params = table2Latex(df_params_tidy, dict_options, notes, string_size)
text_latex_params = open('Results/CFA_params_robust.tex', 'w')
text_latex_params.write(latex_params)
text_latex_params.close()

# --------------------------------------------
# Communalities
# --------------------------------------------

# Clean the tables
df_r2_dls = df_r2_dls.rename(columns={'x': ('DLS','Communality')}, index=dict_vars)
df_r2_uls = df_r2_uls.rename(columns={'x': ('ULS','Communality')}, index=dict_vars)

## Add unique variance column
df_r2_dls[('DLS','Unique Variance')] = 1 - df_r2_dls.iloc[:,0]
df_r2_uls[('ULS','Unique Variance')] = 1 - df_r2_uls.iloc[:,0]

df_r2 = pd.concat([df_r2_dls,
                   df_r2_uls], axis=1)
df_r2.columns = pd.MultiIndex.from_tuples(df_r2.columns,
                                                      names=['', ''])

## To latex
### Prelims
dict_options = {'column_format': 'p{5cm}' + 'p{1.5cm}' * df_r2.shape[1],
                'caption': ('Communalities and Unique Variances: Other Robust Estimation Procedures'),
                'label': 'tab:cfa_r2_robust',
                'position': 'th'}
notes = '\\multicolumn{3}{p{9cm}}{\\textit{Notes.} Communalities and unique variancess of the proxy variables.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_r2 = table2Latex(df_r2, dict_options, notes, string_size)
text_latex_r2 = open('Results/CFA_r2_robust.tex', 'w')
text_latex_r2.write(latex_r2)
text_latex_r2.close()
