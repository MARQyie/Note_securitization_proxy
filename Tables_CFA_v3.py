#--------------------------------------------
# TABLES CFA
# Mark van der Plaat
# August 2021
#--------------------------------------------
''' This script makes tables for the CFA securitization paper.

    All data is generated by Lavaan in R. See CFA_v1.R for more details.
'''

#--------------------------------------------
# Import Packages
#--------------------------------------------
    
# Data manipulation
import pandas as pd
import numpy as np
from scipy import stats

# Plotting
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style = 'whitegrid', font_scale = 3)

import os
os.chdir(r'D:\RUG\PhD\Materials_papers\01-Note_on_securitization')

#--------------------------------------------
# Functions
#--------------------------------------------
# Set heatmap function 
def heatmap(matrix, file, annot = True):
    
    # Set mask
    mask = np.triu(np.ones_like(matrix, dtype=bool), 1)
      
    # Set aesthetics
    dic_aes = {'mask':mask,
               'annot' : annot,
               'center': 0,
               'cmap': 'coolwarm',
               'fmt':'.3f'}
    
    # Make heatmap
    fig, ax = plt.subplots(figsize=(36,24))
    sns.heatmap(matrix, **dic_aes)  
    plt.tight_layout()
    
    # Save heatmap
    fig.savefig('Figures/CFA_covariance_maps/' + file)
    
# Function to make the parameter estimate table pretty
def tidyParamEst(data):
    
    # Select columns
    data_clean = data.iloc[:,[3,4,6,10]]
    
    # Set column names
    data_clean.columns = ['Estimates', 'SD', 'P-value', 'Estimates (compl. std.)']
    
    # Set index names
    ## Prelims
    index_lst = list()
    lst_factors = ('SEC','LS','ABS','CDO','ABCP','ABSCDO','CD')
    var_names = ['cr_as_sbo','cr_as_rmbs',\
             'cr_as_abs','hmda_sec_amount',\
            'cr_secveh_ta',\
             'cr_sec_income','cr_serv_fees',\
             'cr_cds_purchased','cr_abcp_ta',\
             'cr_abcp_uc_own','cr_abcp_ce_own',\
             'cr_abcp_uc_oth','cr_abcp_ce_oth']
    var_labels = ['SBO Transferred','Sec. Residential Loans',\
                  'Sec. Other Assets','Sec. Residential Mortgages',\
                  'TA Sec. Vehicles' ,\
                  'Sec. Income', 'Servicing Fees',\
                  'CDSs Purchased','TA ABCP Conduits',\
                  'Unused Com. ABCP (Own)',\
                  'Credit Exp. ABCP (Own)','Unused Com. ABCP (Others)']
    var_dict = dict(zip(var_names,var_labels))
    
    ## Loop over rows to get the correct parameter name
    for index, row  in data.iloc[:,:3].iterrows(): 
        if row['lhs'] in lst_factors:
            if row['rhs'] in lst_factors:
                if row['lhs'] == row['rhs']:
                    index_lst.append(['Variance ($\phi$)', str(row['lhs']), np.nan])
                else:
                    index_lst.append(['Covariance ($\phi$)', str(row['lhs']), str(row['rhs'])])
                #index_lst.append('$\phi_{' + str(row['lhs']) + ',' +  str(row['rhs']) +'}$')
            else:
                index_lst.append(['Loading ($\lambda$)', str(row['lhs']), str(var_dict[row['rhs']])])
                #index_lst.append('$\lambda_{' + str(row['lhs']) + ',' +  str(var_dict[row['rhs']]) +'}$')
        else:
            if row['lhs'] == row['rhs']:
                index_lst.append(['Variance ($\delta$)', str(var_dict[row['lhs']]), np.nan])
            else:
                index_lst.append(['Covariance ($\delta$)', str(var_dict[row['lhs']]), str(var_dict[row['rhs']])])
            #index_lst.append('$\delta_{' + str(var_dict[row['lhs']]) + ',' +  str(var_dict[row['rhs']]) +'}$')
    
    ## Change Index
    data_index = list(map(list, zip(*index_lst)))
    data_clean = data_clean.assign(LHS = data_index[1],
                                   RHS = data_index[2])

    data_clean.set_index(['LHS','RHS'], inplace = True)
    
    return data_clean

# Function to make latex table from pandas dataframe
def table2Latex(data, options, notes, string_size):
    
    # Get latex table
    latex_table = data.to_latex(na_rep = '', float_format = '{:0.4f}'.format,\
                                                longtable = False, multicolumn = False,\
                                                multicolumn_format = 'c', escape = False,\
                                                **options)
    
    # add notes to bottom of the table
    location_mid = latex_table.find('\end{tabular}')
    latex_table = latex_table[:location_mid] + notes + latex_table[location_mid:]
    
    # adjust sting size
    location_size = latex_table.find('\centering\n')
    latex_table = latex_table[:location_size + len('\centering\n')] + string_size + latex_table[location_size + len('\centering\n'):]
    
    # Insert multicolumns for the fit measures
    if data.index[0] == 'No. Params':
        # Absolute fit
        abs_fit = '& \\\\ \n \\multicolumn{2}{l}{\\textbf{Absolute fit}} \\\\ \n'
        location = latex_table.find('SRMR')
        latex_table = latex_table[:location] + abs_fit + latex_table[location:]
        
        # Parsimonious fit
        pars_fit = '& \\\\ \n \\multicolumn{2}{l}{\\textbf{Parsimonious fit}} \\\\ \n'
        location = latex_table.find('RMSEA')
        latex_table = latex_table[:location] + pars_fit + latex_table[location:]
        
        # Comparative and relative fit
        cr_fit = '& \\\\ \n \\multicolumn{2}{l}{\\textbf{Comparative and relative fit}} \\\\ \n'
        location = latex_table.find('$\chi^2$')
        latex_table = latex_table[:location] + cr_fit + latex_table[location:]
    
        # Other
        oth_fit = '& \\\\ \n \\multicolumn{2}{l}{\\textbf{Other}} \\\\ \n'
        location = latex_table.find('AIC')
        latex_table = latex_table[:location] + oth_fit + latex_table[location:]
        
    # Insert multicolumns for the parameter estimates for two-factor model
    if data.index[0][0] == 'ABSCDO':
        # Factor loadings
        factor_loadings = ' \n \\multicolumn{6}{l}{\\textbf{Factor loadings}} \\\\ \n'
        location = latex_table.find('ABSCDO')
        latex_table = latex_table[:location] + factor_loadings + latex_table[location:]
        
        # Error covariances (unique covariances)
        error_cov = '&&&&& \\\\ \n \\multicolumn{6}{l}{\\textbf{Error covariances}} \\\\ \n'
        location = latex_table.find('Unused Com. ABCP (Own) & Unused Com. ABCP (Others)')
        latex_table = latex_table[:location] + error_cov + latex_table[location:]
        
        # Unique variances
        unique_var = '\n&&&&& \\\\ \n \\multicolumn{6}{l}{\\textbf{Unique variances}} \\\\'
        location = latex_table.find('\nSec. Residential Loans &')
        latex_table = latex_table[:location] + unique_var + latex_table[location:]
        
        # Factor variances
        fac_var = '&&&&& \\\\ \n \\multicolumn{6}{l}{\\textbf{Factor variances}} \\\\ \n'
        location = latex_table.replace('ABSCDO','XXXXXX',1).find('ABSCDO') # trick to find the second ABSCDO
        latex_table = latex_table[:location] + fac_var + latex_table[location:]
        
        # Factor covariances
        fac_cov = '&&&&& \\\\ \n \\multicolumn{6}{l}{\\textbf{Factor covariances}} \\\\ \n'
        location = latex_table.find('ABSCDO & ABCP')
        latex_table = latex_table[:location] + fac_cov + latex_table[location:]
        
    # Insert multicolumns for the parameter estimates for one-factor model
    if data.index[0][0] == 'SEC':
        # Factor loadings
        factor_loadings = ' \n \\multicolumn{6}{l}{\\textbf{Factor loadings}} \\\\ \n'
        location = latex_table.find('SEC')
        latex_table = latex_table[:location] + factor_loadings + latex_table[location:]
        
        # Error covariances (unique covariances)
        error_cov = '&&&&& \\\\ \n \\multicolumn{6}{l}{\\textbf{Error covariances}} \\\\ \n'
        location = latex_table.find('Unused Com. ABCP (Own) & Unused Com. ABCP (Others)')
        latex_table = latex_table[:location] + error_cov + latex_table[location:]
        
        # Unique variances
        unique_var = '\n&&&&& \\\\ \n \\multicolumn{6}{l}{\\textbf{Unique variances}} \\\\'
        location = latex_table.find('\nSec. Residential Loans &')
        latex_table = latex_table[:location] + unique_var + latex_table[location:]
        
        # Factor variances
        fac_var = '&&&&& \\\\ \n \\multicolumn{6}{l}{\\textbf{Factor variances}} \\\\ \n'
        location = latex_table.replace('SEC','XXX',1).find('SEC') # trick to find the second ABSCDO
        latex_table = latex_table[:location] + fac_var + latex_table[location:]
        
        # Insert multi columns in the communality table
    if data.columns[-1] == 'Source':
        # ABS sec
        col = ' \\multicolumn{4}{l}{\\textbf{Proxies for ABS-CDO securitization}} \\\\ \n'
        location = latex_table.find('Sec. Residential Loans')
        latex_table = latex_table[:location] + col + latex_table[location:]
        
        # Both factors
        col = '&&&\\\\ \n \\multicolumn{4}{l}{\\textbf{Proxies for ABS-CDO and ABCP securitization}} \\\\ \n'
        location = latex_table.find('CDSs Purchased')
        latex_table = latex_table[:location] + col + latex_table[location:]
        
        # ABCP factors
        col = '&&&\\\\ \n \\multicolumn{4}{l}{\\textbf{Proxies for ABCP securitization}} \\\\ \n'
        location = latex_table.find('TA ABCP Conduits')
        latex_table = latex_table[:location] + col + latex_table[location:]
        
    return latex_table
    
def tidyFitInd(data):
    
    # Get indices
    lst_fi = ['npar','df','baseline.df', 'srmr', 'rmsea.robust',\
              'rmsea.ci.lower.robust', 'rmsea.ci.upper.robust',
              'rni.robust','chisq','pvalue','chisq.scaled','pvalue.scaled',\
              'chisq.scaling.factor', 'baseline.chisq', 'baseline.chisq.scaled',\
              'cfi.robust','ifi', 'nfi','tli.robust', 'aic','bic', 'gfi','agfi']

    data_clean = data.loc[lst_fi,:]
    
    # Rename index
    lst_fi_labels = ['No. Params','DoF','DoF baseline','SRMR', 'RMSEA (robust)',\
                     'RMSEA lower bound (robust)', 'RMSEA upper bound (robust)',\
                     'RNI (robust)', '$\chi^2$','p-val $\chi^2$','$\chi^2$ (scaled)',\
                     'p-val $\chi^2$ (scaled)','$\chi^2$ scaling factor',\
                     '$\chi^2$ baseline', '$\chi^2$ baseline (scaled)',\
                     'CFI (robust)', 'IFI', 'NFI','TLI (robust)',\
                     'AIC','BIC','GFI','AGFI']
    data_clean.index = lst_fi_labels
    
    # Rename columns
    if data.shape[1] == 2:
        data_clean.columns = ['First-Order','Second-Order']
    else:
        data_clean.rename(columns = {'Unnamed: 1':'Index'}, inplace = True)
        
    # Format values
    data_clean = data_clean.applymap(lambda x: '{:,.4f}'.format(x) if not 27 <=  x <= 66 else '{:,.0f}'.format(x))
    
    return data_clean

# Function to make the modification table table pretty
def tidyModInd(data):
    
    # Select columns
    data_clean = data.iloc[:,[3,4,6]]
    
    # Set column names
    data_clean.columns = ['Mod. Indices','EPC','EPC (compl. std.)']
    
    # Set index names
    ## Prelims
    index_lst = list()
    lst_factors = ('SEC','LS','ABS','CDO','ABCP','ABSCDO','CD')
    var_names = ['cr_as_sbo','cr_as_rmbs',\
             'cr_as_abs','hmda_sec_amount',\
            'cr_secveh_ta',\
             'cr_sec_income','cr_serv_fees',\
             'cr_cds_purchased','cr_abcp_ta',\
             'cr_abcp_uc_own','cr_abcp_ce_own',\
             'cr_abcp_uc_oth','cr_abcp_ce_oth']
    var_labels = ['SBO Transferred','Sec. Residential Loans',\
                  'Sec. Other Assets','Sec. Residential Mortgages',\
                  'TA Sec. Vehicles' ,\
                  'Sec. Income', 'Servicing Fees',\
                  'CDSs Purchased','TA ABCP Conduits',\
                  'Unused Com. ABCP (Own)',\
                  'Credit Exp. ABCP (Own)','Unused Com. ABCP (Others)']
    var_dict = dict(zip(var_names,var_labels))
    
    ## Loop over rows to get the correct parameter name
    for index, row  in data.iloc[:,:3].iterrows(): 
        if row['lhs'] in lst_factors:
            if row['rhs'] in lst_factors:
                if row['lhs'] == row['rhs']:
                    index_lst.append(['Variance ($\phi$)', str(row['lhs']), np.nan])
                else:
                    index_lst.append(['Covariance ($\phi$)', str(row['lhs']), str(row['rhs'])])
            else:
                index_lst.append(['Loading ($\lambda$)', str(row['lhs']), str(var_dict[row['rhs']])])
                #index_lst.append('$\lambda_{' + str(row['lhs']) + ',' +  str(var_dict[row['rhs']]) +'}$')
        else:
            if row['lhs'] == row['rhs']:
                index_lst.append(['Variance ($\delta$)', str(var_dict[row['lhs']]), np.nan])
            else:
                index_lst.append(['Covariance ($\delta$)', str(var_dict[row['lhs']]), str(var_dict[row['rhs']])])
            #index_lst.append('$\delta_{' + str(var_dict[row['lhs']]) + ',' +  str(var_dict[row['rhs']]) +'}$')
    
    ## Change Index
    data_index = list(map(list, zip(*index_lst)))
    data_clean = data_clean.assign(Operator = data_index[0],
                                   LHS = data_index[1],
                                   RHS = data_index[2])

    data_clean.set_index(['Operator','LHS','RHS'], inplace = True)
    
    return data_clean

#--------------------------------------------
# Prelims
#--------------------------------------------
var_names = ['cr_as_sbo','cr_as_rmbs',\
             'cr_as_abs','hmda_sec_amount',\
            'cr_secveh_ta',\
             'cr_sec_income','cr_serv_fees',\
             'cr_cds_purchased','cr_abcp_ta',\
             'cr_abcp_uc_own','cr_abcp_ce_own',\
             'cr_abcp_uc_oth','cr_abcp_ce_oth']
var_labels = ['SBO Transferred','Sec. Residential Loans',\
              'Sec. Other Assets','Sec. Residential Mortgages',\
              'TA Sec. Vehicles' ,\
              'Sec. Income', 'Servicing Fees',\
              'CDSs Purchased','TA ABCP Conduits',\
              'Unused Com. ABCP (Own)',\
              'Credit Exp. ABCP (Own)','Unused Com. ABCP (Others)']
dict_vars = dict(zip(var_names,var_labels))

# Add Factor names
dict_vars.update({'LS':'Loan Sales',
                  'ABS':'ABS Sec.',
                  'CDO':'CDO Sec.',
                  'ABCP':'ABCP Sec.',
                  'SEC':'Securitization'})

#--------------------------------------------
# Load data 
#--------------------------------------------

# Parameter estimates
df_params_impr = pd.read_csv('Results/CFA_params_impr.csv', index_col = 0)
df_params_onesec = pd.read_csv('Results/CFA_params_onesec.csv', index_col = 0)

# Model implied covariance matrix
df_micm_impr = pd.read_csv('Results/CFA_modimplied_cov_impr.csv', index_col = 0)
df_micm_onesec = pd.read_csv('Results/CFA_modimplied_cov_onesec.csv', index_col = 0)

# Residual covariance matrix
df_rcm = pd.read_csv('Results/CFA_rescov.csv', index_col = 0)
df_srcm = pd.read_csv('Results/CFA_rescov_standard.csv', index_col = 0)

df_rcm_impr = pd.read_csv('Results/CFA_rescov_impr.csv', index_col = 0)
df_srcm_impr = pd.read_csv('Results/CFA_rescov_standard_impr.csv', index_col = 0)

df_rcm_onesec = pd.read_csv('Results/CFA_rescov_onesec.csv', index_col = 0)
df_srcm_onesec = pd.read_csv('Results/CFA_rescov_standard_onesec.csv', index_col = 0)

# fit indices 
df_fi_impr = pd.read_csv('Results/CFA_fitmeasures_impr.csv', index_col = 0)
df_fi_onesec = pd.read_csv('Results/CFA_fitmeasures_onesec.csv', index_col = 0)

# Modification indices
df_mi_impr = pd.read_csv('Results/CFA_modindices_impr.csv', index_col = 0)
df_mi_onesec = pd.read_csv('Results/CFA_modindices_onesec.csv', index_col = 0)

# Communalities
df_r2_impr = pd.read_csv('Results/CFA_r2_impr.csv', index_col = 0)

#--------------------------------------------
# Parameter estimates 
#--------------------------------------------

# Improved model
## Get tidy table
df_params_impr_tidy = tidyParamEst(df_params_impr)

## To latex
### Prelims
dict_options = {'column_format':'p{4cm}p{4cm}' + 'p{1cm}' * df_params_impr_tidy.shape[1],
                'caption':('Factor Loadings, Variances and Covariances'),
                'label':'tab:cfa_table_impr',
                'position':'th'}
notes = '\\multicolumn{6}{p{14.5cm}}{\\textit{Notes.} Factor loadings, factor variances and covariances, and unique variances and covariances of the factor model. The last column presents the completely standardized estimates, where the factor variances are fixed to one and all other parameters are standardized.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_params_impr = table2Latex(df_params_impr_tidy,dict_options,notes,string_size)
text_latex_params_impr = open('Results/CFA_params_impr.tex', 'w')
text_latex_params_impr.write(latex_params_impr)
text_latex_params_impr.close()

# One Sec
## Get tidy table
df_params_onesec_tidy = tidyParamEst(df_params_onesec)

## To latex
### Prelims
dict_options = {'column_format':'p{4cm}p{4cm}' + 'p{1cm}' * df_params_onesec_tidy.shape[1],
                'caption':('Factor Loadings, Variances and Covariances: One Securitization Factor Model'),
                'label':'tab:cfa_table_onesec',
                'position':'th'}
notes = '\\multicolumn{6}{p{14.5cm}}{\\textit{Notes.} Factor loadings, factor variances and covariances, and unique variances and covariances of the factor model. The last column presents the completely standardized estimates, where the factor variances are fixed to one and all other parameters are standardized.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_params_onesec = table2Latex(df_params_onesec_tidy,dict_options,notes,string_size)
text_latex_params_onesec = open('Results/CFA_params_onesec.tex', 'w')
text_latex_params_onesec.write(latex_params_onesec)
text_latex_params_onesec.close()

#--------------------------------------------
#  Model implied covariance matrix 
#--------------------------------------------

# Improved model
heatmap(df_micm_impr.rename(columns = dict_vars, index = dict_vars), 'Modelimplied_cov_heatmap_impr.png')

# One Sec
heatmap(df_micm_onesec.rename(columns = dict_vars, index = dict_vars), 'Modelimplied_cov_heatmap_onesec.png')

#--------------------------------------------
# Residual covariance matrix
#--------------------------------------------

# Model
heatmap(df_rcm.rename(columns = dict_vars, index = dict_vars), 'Residual_cov_heatmap.png')
heatmap(df_srcm.rename(columns = dict_vars, index = dict_vars), 'Residual_cov_std_heatmap.png')

# Improved model
heatmap(df_rcm_impr.rename(columns = dict_vars, index = dict_vars), 'Residual_cov_heatmap_impr.png')
heatmap(df_srcm_impr.rename(columns = dict_vars, index = dict_vars), 'Residual_cov_std_heatmap_impr.png')

# One Sec
heatmap(df_rcm_onesec.rename(columns = dict_vars, index = dict_vars), 'Residual_cov_heatmap_onesec.png')
heatmap(df_srcm_onesec.rename(columns = dict_vars, index = dict_vars), 'Residual_cov_std_heatmap_onesec.png')

#--------------------------------------------
# fit indices 
#--------------------------------------------

# Improved model
## Get tidy table
df_fi_impr_tidy = tidyFitInd(df_fi_impr)

## To latex
### Prelims
dict_options = {'column_format':'p{4cm}' + 'p{1.5cm}' * df_fi_impr_tidy.shape[1],
                'caption':('Fit Indices'),
                'label':'tab:cfa_fit_impr',
                'position':'th'}
notes = '\\multicolumn{2}{p{5.5cm}}{\\textit{Notes.} Fit indices of the factor model.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_fi_impr = table2Latex(df_fi_impr_tidy,dict_options,notes,string_size)
text_latex_fi_impr = open('Results/CFA_fi_impr.tex', 'w')
text_latex_fi_impr.write(latex_fi_impr)
text_latex_fi_impr.close()

# One Sec
## Get tidy table
df_fi_onesec_tidy = tidyFitInd(df_fi_onesec)

## To latex
### Prelims
dict_options = {'column_format':'p{4cm}' + 'p{1.5cm}' * df_fi_onesec_tidy.shape[1],
                'caption':('Fit Indices: One Securitization Factor Model'),
                'label':'tab:cfa_fit_onesec',
                'position':'th'}
notes = '\\multicolumn{2}{p{5.5cm}}{\\textit{Notes.} Fit indices of the model with one securitization factor.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_fi_onesec = table2Latex(df_fi_onesec_tidy,dict_options,notes,string_size)
text_latex_fi_onesec = open('Results/CFA_fi_onesec.tex', 'w')
text_latex_fi_onesec.write(latex_fi_onesec)
text_latex_fi_onesec.close()

#--------------------------------------------
# Modification indices 
#--------------------------------------------

# Improved model
## Get tidy table
df_mi_impr_tidy = tidyModInd(df_mi_impr)

## To latex
### Prelims
dict_options = {'column_format':'p{2cm}p{4cm}p{4cm}' + 'p{1cm}' * df_mi_impr_tidy.shape[1],
                'caption':('Modification Indices'),
                'label':'tab:cfa_mi_impr',
                'position':'th'}
notes = '\\multicolumn{6}{p{15.5cm}}{\\textit{Notes.} Modification indices of the factor model. The last column presents the completely standardized modification indices, where the factor variances are fixed to one and all other parameters are standardized.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_mi_impr = table2Latex(df_mi_impr_tidy,dict_options,notes,string_size)
text_latex_mi_impr = open('Results/CFA_mi_impr.tex', 'w')
text_latex_mi_impr.write(latex_mi_impr)
text_latex_mi_impr.close()

# One Sec
## Get tidy table
df_mi_onesec_tidy = tidyModInd(df_mi_onesec)

## To latex
### Prelims
dict_options = {'column_format':'p{2cm}p{4cm}p{4cm}' + 'p{1cm}' * df_mi_onesec_tidy.shape[1],
                'caption':('Modification Indices: One Securitization Factor Model'),
                'label':'tab:cfa_mi_onesec',
                'position':'th'}
notes = '\\multicolumn{6}{p{15.5cm}}{\\textit{Notes.} Modification indices of the model with one securitization factor. The last column presents the completely standardized modification indices, where the factor variances are fixed to one and all other parameters are standardized.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_mi_onesec = table2Latex(df_mi_impr_tidy,dict_options,notes,string_size)
text_latex_mi_onesec = open('Results/CFA_mi_onesec.tex', 'w')
text_latex_mi_onesec.write(latex_mi_onesec)
text_latex_mi_onesec.close()

#--------------------------------------------
# Communalities
#--------------------------------------------

# Improved model
## Clean the table
df_r2_impr_tidy = df_r2_impr.rename(columns = {'x':'Communality'}, index = dict_vars)

## Add unique variance column
df_r2_impr_tidy['Unique Variance'] = 1 - df_r2_impr_tidy.Communality

## Add column whether variable is new, used by or based on
df_r2_impr_tidy['Source'] = ['Used by','Used by','New','Used by','Based on',\
                                 'Used by','New','New','Used by','Used by',\
                                 'Based on','Based on']

## To latex
### Prelims
dict_options = {'column_format':'p{5cm}' + 'p{1.5cm}' * df_r2_impr_tidy.shape[1],
                'caption':('Communalities and Unique Variances'),
                'label':'tab:cfa_r2_impr',
                'position':'th'}
notes = '\\multicolumn{4}{p{10.5cm}}{\\textit{Notes.} Communalities and unique variancess of the proxy variables. The last column indicates whether the proxy is new, used by the literature or based on the literature.} \n'
string_size = '\\scriptsize\n'

### Get latex table and save
latex_r2_impr = table2Latex(df_r2_impr_tidy,dict_options,notes,string_size)
text_latex_r2_impr = open('Results/CFA_r2_impr.tex', 'w')
text_latex_r2_impr.write(latex_r2_impr)
text_latex_r2_impr.close()